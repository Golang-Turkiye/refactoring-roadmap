// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	"github.com/Golang-Turkiye/refactoring-roadmap/internal/urlshorter/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockLinkService is an autogenerated mock type for the LinkService type
type MockLinkService struct {
	mock.Mock
}

// CreateLink provides a mock function with given fields: link
func (_m *MockLinkService) CreateLink(link *domain.Link) error {
	ret := _m.Called(link)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Link) error); ok {
		r0 = rf(link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeactivateLink provides a mock function with given fields: linkID
func (_m *MockLinkService) DeactivateLink(linkID uint) error {
	ret := _m.Called(linkID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(linkID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllLinks provides a mock function with given fields: ownerID
func (_m *MockLinkService) GetAllLinks(ownerID uint) ([]*domain.Link, error) {
	ret := _m.Called(ownerID)

	var r0 []*domain.Link
	if rf, ok := ret.Get(0).(func(uint) []*domain.Link); ok {
		r0 = rf(ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Link)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLink provides a mock function with given fields: shortPath
func (_m *MockLinkService) GetLink(shortPath string) (*domain.Link, error) {
	ret := _m.Called(shortPath)

	var r0 *domain.Link
	if rf, ok := ret.Get(0).(func(string) *domain.Link); ok {
		r0 = rf(shortPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Link)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shortPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockLinkService creates a new instance of MockLinkService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLinkService(t testing.TB) *MockLinkService {
	mock := &MockLinkService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
